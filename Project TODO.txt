##app.java
	2. check if database exists and if not create it?

##Book.java
	1. Decide if we want to do something special for author aliases
	2. add comment/review stream field to this structure later.
	3. potentially overload constructor so personal fields can be set with a single call.
	
##BookDao.java
1. (OPTIMIZING) redesign our getBooksByAuthor() function to use IN or ANY pre-prepared statement with static counts of ids in the list to improve our query performance. There are multiple listed alternative ways listed in the function.
2. (OPTIMIZING) re-implement our getRandomBook() function as our way has large overhead when used in a huge database.
4. (OPTIMIZING) change getBookByBookID() to a skeleton function that calls a helper which takes the book_ID and a connection. This will allow getBookByIdentifier() to call the helper instead of getBookByBookID() thereby removing redundant open connections to the database and improving performance


##Database changes
	2. fix book(author_id) as it should actually reference a junction table as there are potentially more than one author per series. 
	(IMPORTANT) use pg_chron to make a periodic job that updates rating of a series? (since changing user ratings may or may not impact?
	TODO add indexes to the tables
	
##IdentifierUtils.java
3. extend formatAndValidateIdentifiers() to allow more identifier schemes than just ISBN


##LibraryDB.java
	1. add getGenres(); to grab all genre titles and create and push to global constants a list of potential genres (for quick book adding suggestions)

##UserController.java
	1. add adjust_user_book_rating() function

##UserDao.java
	Add function to add/edit entry in user_book_rating table to allow a user to rate a book.

##UtilsForTests.java
1. add some kind of suppression/warning in our createTestDB() and resetDB() function that checks and exits if(GlobalConstants.TEST_DBNAME.equalsIgnoreCase(Utils.getConfigString("app.dbname", null)) this protects against the tests wiping out our real database if someone names them the same thing. 

##MISC
1. to boost code coverage For each function we could use DAORoot.changeDB() to a non existing database and ignore the boolean return. This should cause exceptions in said function which are currently not being tested



#######
(IMPORTANT) Create Genre inheritance tree and create SQL script to automatically generate them from our existing genre-types (like our install sql script)





##project size tasks
1. Create Scraper to recursively scan our file directory and extract required metadata from the epub .opf file as well as extracting cover image for our view of the book.
2. Make a tool to create/locate a a nested file directory structure for the cover images in our database system.
3. Create QTJambi interface to allow GUI access to the library_database project in an app form
4. create Spark app interface to allow access to system via webpages.


#######README
##for db
delete(series) -> should fail if: books_in_series>0
update(series.number_books_in_series -1) -> fails if count is already at zero.
delete(author) -> should cascade delete(books) AND cascade delete(series)
delete(book) -> should update(series.number_books_in_series) + update(series.number_books_in_series) + update(author)

Notes:
For series. if the primary_author_id is deleted the series is deleted as well. However. Series is protected unless number_books_in_series==0. Thus to delete a series all books must be removed (or a manual update to number_books_in_series to make it seem like there are no more books

to delete author(delete all books)

when implementing bookDao: for the getter functions.
If I actually inlined all the requests for the supplementary tables (book_authors, book_genres, book_identifiers), the execution speed almost doubles with getAllBooks(): 0.33s to 0.6-0.7s. That seems a rather substantial overhead for simply querying another function. Further checking may be required.


#for identifier specification:
http://idpf.github.io/epub-registries/identifiers/



##functions i may want to add
for seriesController we may want to add a function that forces series removal by decrementing count to 0 and deleting all the books in the series instead of manual book removal being required.

